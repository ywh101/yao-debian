HEAD is a pointer, pointing to the present branch(master or other branches)
git checkout -b [branch]		means that create the [branch] and switch to the [branch]
				equals to		'git branch [branch]' + 'git checkout [branch]'
git branch		to check the present branch[show all branch and the present branch with a '*']
git merge [branch]		to merge the [branch] to the present branch
git branch -d [branch]		to delete the [branch]

While the [branch] has its own modification and the master branch has different modification('git merge [branch]'), the conflict happens, we need to modify the conflict by hand. Then 'git add     [file]' and 'git commit -m "comment"'

git log --graph	<--abbrev-commit>	to show the paragraph of the branch merge
git merge --no-ff(forbid the 'Fast forward(fast merge)') -m "comment" [branch]		it will create				a new 'commit', so we need to add '-m "comment"'

git stash		to store the scene(a branch not completed) and the working directory will be clean
				then you can change the [branch], and create a branch for fixing bug
git stash list		to check the scene
	to recover the scene, two methods: 1, 'git stash apply' to restore, but the stash content is										still exist, you need to use 'git stash drop' to clean
									   2, 'git stash pop' to restore and clean at the same time
					eg: 'git stash apply stash@{0}' "stash@{0}" you can get from 'git stash list'
					You can 'git stash' many times, and use 'eg' to restore
git branch -D [branch]		if the [branch] is not merged yes, use the command to delete forcely

git remote		to check the information of the remote repository
				the "origin" is the default name of the remote repository 
	git remote -v		to check the more detailed information

git push 'origin' 'master'		to push the local branch to the remote corresponding branch
git pull		to grasp the remote branch, if there is conflict, you should resolve it first
git branch --set-upstream [branch] [origin/branch]		to establish the linkage between the local														  branch and the remote branch
git rebase		to change the local furcation(not pushed) into the line branch
				then you can use 'git push origin master' to push the branch to the remote
iii
